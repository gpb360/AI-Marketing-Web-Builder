name: Story-to-Task Automation & Tracking

on:
  issues:
    types: [opened, labeled, assigned]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      story_number:
        description: 'Story number (e.g., 3.3)'
        required: true
        type: string
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'create_tasks'
          - 'update_progress'
          - 'generate_roadmap'

jobs:
  story-task-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      projects: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Story Task Breakdown
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github } = require('@actions/github');
            
            // Comprehensive Story Task Definitions
            const STORY_TASK_TEMPLATES = {
              '3.3': {
                title: 'Performance Analytics Dashboard',
                estimated_hours: 30,
                tasks: [
                  {
                    title: 'Advanced Analytics Data Pipeline',
                    description: 'Create WorkflowAnalyticsService for comprehensive performance data collection',
                    acceptance_criteria: ['Real-time metrics aggregation', 'Time-series data processing', 'Conversion funnel analysis'],
                    estimated_hours: 8,
                    labels: ['backend', 'analytics', 'story-3.3'],
                    assignee_type: 'backend-developer'
                  },
                  {
                    title: 'Performance Comparison Engine',
                    description: 'Implement statistical significance testing for A/B comparison validity',
                    acceptance_criteria: ['A/B testing framework', 'Statistical significance testing', 'Performance delta analysis'],
                    estimated_hours: 6,
                    labels: ['backend', 'analytics', 'ml', 'story-3.3'],
                    assignee_type: 'backend-developer'
                  },
                  {
                    title: 'Advanced Analytics Dashboard UI',
                    description: 'Create ComprehensiveAnalyticsDashboard component with interactive visualizations',
                    acceptance_criteria: ['Interactive visualizations', 'Drill-down navigation', 'Real-time updates'],
                    estimated_hours: 10,
                    labels: ['frontend', 'ui', 'analytics', 'story-3.3'],
                    assignee_type: 'frontend-developer'
                  },
                  {
                    title: 'ROI and Cost Analysis System',
                    description: 'Build ROI calculation engine with customizable business value metrics',
                    acceptance_criteria: ['ROI calculation engine', 'Cost attribution system', 'Predictive cost modeling'],
                    estimated_hours: 6,
                    labels: ['backend', 'business-logic', 'story-3.3'],
                    assignee_type: 'backend-developer'
                  }
                ]
              },
              '3.4': {
                title: 'Predictive SLA Prevention',
                estimated_hours: 25,
                tasks: [
                  {
                    title: 'Predictive SLA Analysis Engine',
                    description: 'Build AI-powered SLA violation prediction system',
                    acceptance_criteria: ['Machine learning prediction model', 'Historical data analysis', 'Risk scoring algorithm'],
                    estimated_hours: 10,
                    labels: ['backend', 'ml', 'sla', 'story-3.4'],
                    assignee_type: 'ai-engineer'
                  },
                  {
                    title: 'Early Warning System',
                    description: 'Create proactive alerting system for potential SLA violations',
                    acceptance_criteria: ['Real-time monitoring', 'Smart alerting', 'Escalation workflows'],
                    estimated_hours: 8,
                    labels: ['backend', 'monitoring', 'story-3.4'],
                    assignee_type: 'backend-developer'
                  },
                  {
                    title: 'SLA Prevention Dashboard',
                    description: 'Create SLA prevention dashboard with predictive insights',
                    acceptance_criteria: ['Predictive visualization', 'Risk indicators', 'Action recommendations'],
                    estimated_hours: 7,
                    labels: ['frontend', 'dashboard', 'sla', 'story-3.4'],
                    assignee_type: 'frontend-developer'
                  }
                ]
              },
              '3.5': {
                title: 'SLA Threshold Optimization',
                estimated_hours: 20,
                tasks: [
                  {
                    title: 'Dynamic Threshold Engine',
                    description: 'Create AI-powered system for optimal SLA threshold calculation',
                    acceptance_criteria: ['Dynamic threshold calculation', 'Performance-based adjustment', 'Business impact optimization'],
                    estimated_hours: 8,
                    labels: ['backend', 'ml', 'optimization', 'story-3.5'],
                    assignee_type: 'ai-engineer'
                  },
                  {
                    title: 'Threshold Management Interface',
                    description: 'Build UI for SLA threshold configuration and monitoring',
                    acceptance_criteria: ['Threshold configuration UI', 'Visual threshold monitoring', 'Historical threshold analysis'],
                    estimated_hours: 7,
                    labels: ['frontend', 'ui', 'sla', 'story-3.5'],
                    assignee_type: 'frontend-developer'
                  },
                  {
                    title: 'Optimization Algorithm',
                    description: 'Implement continuous learning algorithm for threshold optimization',
                    acceptance_criteria: ['Continuous learning system', 'Performance feedback loop', 'Automated optimization'],
                    estimated_hours: 5,
                    labels: ['backend', 'ml', 'algorithm', 'story-3.5'],
                    assignee_type: 'ai-engineer'
                  }
                ]
              },
              '3.7': {
                title: 'Context-Aware Templates',  
                estimated_hours: 30,
                tasks: [
                  {
                    title: 'Context Analysis Engine',
                    description: 'Build advanced business context analysis system building on Story 3.2',
                    acceptance_criteria: ['Enhanced business analysis', 'Context pattern recognition', 'Industry-specific optimization'],
                    estimated_hours: 10,
                    labels: ['backend', 'ai', 'templates', 'story-3.7'],
                    assignee_type: 'ai-engineer',
                    dependencies: ['story-3.2']
                  },
                  {
                    title: 'Smart Template Adaptation',
                    description: 'Create intelligent template adaptation based on real-time context',
                    acceptance_criteria: ['Real-time template adaptation', 'Context-aware customization', 'Performance optimization'],
                    estimated_hours: 12,
                    labels: ['backend', 'templates', 'ai', 'story-3.7'],
                    assignee_type: 'ai-engineer',
                    dependencies: ['story-3.2']
                  },
                  {
                    title: 'Context-Aware Template UI',
                    description: 'Enhance SmartTemplateSelector with context awareness',
                    acceptance_criteria: ['Context-aware template filtering', 'Dynamic template suggestions', 'Context visualization'],
                    estimated_hours: 8,
                    labels: ['frontend', 'templates', 'ui', 'story-3.7'],
                    assignee_type: 'frontend-developer',
                    dependencies: ['story-3.2']
                  }
                ]
              }
            };

            // Get current event details
            const eventName = context.eventName;
            let storyNumber = null;
            
            if (eventName === 'workflow_dispatch') {
              storyNumber = context.payload.inputs.story_number;
            } else if (eventName === 'issues' && context.payload.issue) {
              const issue = context.payload.issue;
              const match = issue.title.match(/Story\s+(\d+\.\d+)|(\d+\.\d+):/i);
              if (match) {
                storyNumber = match[1] || match[2];
              }
            }
            
            if (!storyNumber || !STORY_TASK_TEMPLATES[storyNumber]) {
              console.log(`No task template found for story ${storyNumber}`);
              return;
            }
            
            const storyConfig = STORY_TASK_TEMPLATES[storyNumber];
            console.log(`Processing Story ${storyNumber}: ${storyConfig.title}`);
            
            // Create tasks as GitHub issues
            if (eventName === 'workflow_dispatch' && context.payload.inputs.action === 'create_tasks') {
              console.log(`Creating ${storyConfig.tasks.length} tasks for Story ${storyNumber}`);
              
              for (const [index, task] of storyConfig.tasks.entries()) {
                const taskTitle = `[Story ${storyNumber}] Task ${index + 1}: ${task.title}`;
                const taskBody = `## Task Description
${task.description}

## Acceptance Criteria
${task.acceptance_criteria.map(ac => `- [ ] ${ac}`).join('\n')}

## Estimated Hours
${task.estimated_hours}h

## Dependencies
${task.dependencies ? task.dependencies.map(dep => `- Depends on: ${dep}`).join('\n') : 'None'}

## Story Context
Part of **Story ${storyNumber}: ${storyConfig.title}**

## Assignee Type
Recommended for: ${task.assignee_type}

---
*Auto-generated task for Epic 3 - Workflow Automation Excellence*`;

                try {
                  const createdIssue = await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: taskTitle,
                    body: taskBody,
                    labels: [...task.labels, `task-${index + 1}`, 'epic-3', 'auto-generated']
                  });
                  
                  console.log(`Created task: ${taskTitle} (#${createdIssue.data.number})`);
                } catch (error) {
                  console.error(`Failed to create task: ${task.title}`, error.message);
                }
              }
            }
            
            // Auto-generate tasks when story issue is labeled
            if (eventName === 'issues' && context.payload.action === 'labeled') {
              const label = context.payload.label.name;
              if (label === 'ready-for-development' || label === 'create-tasks') {
                console.log(`Auto-generating tasks for Story ${storyNumber} due to label: ${label}`);
                
                // Create a workflow dispatch to generate tasks
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'story-task-automation.yml',
                  ref: 'main',
                  inputs: {
                    story_number: storyNumber,
                    action: 'create_tasks'
                  }
                });
              }
            }

      - name: Generate Epic 3 Roadmap
        if: github.event.inputs.action == 'generate_roadmap'
        uses: actions/github-script@v7  
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github } = require('@actions/github');
            
            // Generate comprehensive Epic 3 roadmap
            const roadmap = `# Epic 3 - Workflow Automation Excellence Roadmap

## 🎯 Epic Overview
Transform workflow automation with advanced debugging, AI-powered templates, and comprehensive analytics.

## 📊 Current Status (${new Date().toISOString().split('T')[0]})

### ✅ IMPLEMENTED (Ready for Testing)
- **Story 3.1**: Visual Workflow Debugging - Real-time debugging with WebSocket integration
- **Story 3.2**: Smart Workflow Templates - AI-powered business analysis and template recommendations

### 📋 DOCUMENTED (Ready for Development)  
- **Story 3.3**: Performance Analytics Dashboard - Comprehensive analytics and reporting
- **Story 3.4**: Predictive SLA Prevention - AI-powered SLA violation prediction
- **Story 3.5**: SLA Threshold Optimization - Dynamic threshold adjustment
- **Story 3.6**: SLA Violation Workflows - Automated SLA violation handling
- **Story 3.7**: Context-Aware Templates - Enhanced template intelligence (builds on 3.2)
- **Story 3.8**: Component Suggestions - Smart workflow component recommendations
- **Story 3.9**: Template Optimization - Continuous template improvement
- **Story 3.10**: Multi-Platform Orchestration - Cross-platform workflow management
- **Story 3.11**: Intelligent Workflow Optimization - AI-powered workflow improvement
- **Story 3.12**: Advanced Workflow Debugging - Enhanced debugging capabilities

## 🗓️ Recommended Development Sequence

### Phase 1: Foundation Strengthening (Week 1-2)
1. **Integration Testing** for Stories 3.1 & 3.2
2. **Story 3.3** - Performance Analytics (builds essential monitoring)
3. **Story 3.7** - Context-Aware Templates (extends 3.2 implementation)

### Phase 2: SLA & Performance (Week 3-4) 
4. **Story 3.4** - Predictive SLA Prevention
5. **Story 3.5** - SLA Threshold Optimization  
6. **Story 3.6** - SLA Violation Workflows

### Phase 3: Intelligence & Optimization (Week 5-6)
7. **Story 3.8** - Component Suggestions
8. **Story 3.9** - Template Optimization
9. **Story 3.11** - Intelligent Workflow Optimization

### Phase 4: Advanced Features (Week 7-8)
10. **Story 3.10** - Multi-Platform Orchestration
11. **Story 3.12** - Advanced Workflow Debugging

## 💡 Key Dependencies
- Stories 3.7, 3.8, 3.9 build on Story 3.2 (Smart Templates)
- Stories 3.4, 3.5, 3.6 work together as SLA management suite
- Story 3.3 provides analytics foundation for optimization features

## 🎯 Success Metrics
- **Technical**: <30min template-to-live-site, >95% workflow reliability
- **Business**: >50% increase in template adoption, >20% conversion improvement
- **User Experience**: <2min issue identification, >4.5/5 debugging satisfaction

## 🚀 Competitive Advantages
- **Magic Connector**: AI-powered component-to-workflow connection
- **Real-time Debugging**: Industry-leading workflow visibility
- **Predictive SLA**: Proactive performance management
- **Context Intelligence**: Business-aware template recommendations

---
*Epic 3 represents the evolution from basic workflow automation to intelligent, self-optimizing automation platform.*`;

            // Create or update roadmap file
            try {
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'docs/EPIC_3_ROADMAP.md',
                message: 'Update Epic 3 roadmap with current status and development sequence',
                content: Buffer.from(roadmap).toString('base64'),
                branch: 'main'
              });
              
              console.log('Epic 3 roadmap generated and saved to docs/EPIC_3_ROADMAP.md');
            } catch (error) {
              console.error('Failed to create roadmap file:', error.message);
            }

      - name: Update Story Progress Tracking
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github } = require('@actions/github');
            
            // Track story completion and generate progress reports
            const stories = ['3.1', '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', '3.10', '3.11', '3.12'];
            const progressData = [];
            
            for (const story of stories) {
              const issues = await github.rest.search.issuesAndPullRequests({
                q: `repo:${context.repo.owner}/${context.repo.repo} "${story}" in:title is:issue`
              });
              
              const tasks = await github.rest.search.issuesAndPullRequests({
                q: `repo:${context.repo.owner}/${context.repo.repo} "Story ${story}" in:title is:issue`
              });
              
              const completedTasks = await github.rest.search.issuesAndPullRequests({
                q: `repo:${context.repo.owner}/${context.repo.repo} "Story ${story}" in:title is:closed is:issue`
              });
              
              progressData.push({
                story,
                total_tasks: tasks.data.total_count,
                completed_tasks: completedTasks.data.total_count,
                completion_rate: tasks.data.total_count > 0 ? 
                  Math.round((completedTasks.data.total_count / tasks.data.total_count) * 100) : 0
              });
            }
            
            console.log('Epic 3 Story Progress:');
            progressData.forEach(story => {
              console.log(`Story ${story.story}: ${story.completed_tasks}/${story.total_tasks} tasks (${story.completion_rate}%)`);
            });
            
            const totalTasks = progressData.reduce((sum, story) => sum + story.total_tasks, 0);
            const totalCompleted = progressData.reduce((sum, story) => sum + story.completed_tasks, 0);
            const overallProgress = totalTasks > 0 ? Math.round((totalCompleted / totalTasks) * 100) : 0;
            
            console.log(`\\nOverall Epic 3 Progress: ${totalCompleted}/${totalTasks} tasks (${overallProgress}%)`);
            
            // Store progress data for dashboard
            const progressReport = {
              generated_at: new Date().toISOString(),
              overall_progress: overallProgress,
              total_tasks: totalTasks,
              completed_tasks: totalCompleted,
              stories: progressData
            };
            
            console.log('Progress tracking completed successfully');