name: Epic 3 - Workflow Automation Excellence - Project Tracking

on:
  issues:
    types: [opened, edited, closed, reopened, labeled, unlabeled]
  pull_request:
    types: [opened, edited, closed, reopened, merged, ready_for_review, converted_to_draft]
  project:
    types: [created, updated]

jobs:
  epic-3-tracking:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
      projects: write
      repository-projects: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Epic 3 Story Automation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github } = require('@actions/github');
            
            // Epic 3 Story Configuration
            const EPIC_3_STORIES = {
              '3.1': { 
                title: 'Visual Workflow Debugging',
                status: 'IMPLEMENTED',
                components: ['ExecutionTimeline', 'WorkflowDebuggingPanel', 'ErrorDetailsModal'],
                priority: 'HIGH',
                estimated_hours: 40
              },
              '3.2': { 
                title: 'Smart Workflow Templates', 
                status: 'IMPLEMENTED',
                components: ['SmartTemplateSelector', 'SmartTemplateRecommendations', 'BusinessWorkflowService'],
                priority: 'HIGH',
                estimated_hours: 35
              },
              '3.3': { 
                title: 'Performance Analytics Dashboard',
                status: 'IMPLEMENTED',
                priority: 'HIGH',
                estimated_hours: 30
              },
              '3.4': { 
                title: 'Predictive SLA Prevention',
                status: 'DOCUMENTED', 
                priority: 'MEDIUM',
                estimated_hours: 25
              },
              '3.5': { 
                title: 'SLA Threshold Optimization',
                status: 'DOCUMENTED',
                priority: 'MEDIUM', 
                estimated_hours: 20
              },
              '3.6': { 
                title: 'SLA Violation Workflows',
                status: 'DOCUMENTED',
                priority: 'MEDIUM',
                estimated_hours: 25
              },
              '3.7': { 
                title: 'Context-Aware Templates',
                status: 'DOCUMENTED',
                priority: 'HIGH',
                estimated_hours: 30
              },
              '3.8': { 
                title: 'Component Suggestions',
                status: 'DOCUMENTED',
                priority: 'MEDIUM',
                estimated_hours: 20
              },
              '3.9': { 
                title: 'Template Optimization',
                status: 'DOCUMENTED',
                priority: 'MEDIUM',
                estimated_hours: 25
              },
              '3.10': { 
                title: 'Multi-Platform Orchestration',
                status: 'DOCUMENTED',
                priority: 'LOW',
                estimated_hours: 45
              },
              '3.11': { 
                title: 'Intelligent Workflow Optimization',
                status: 'DOCUMENTED',
                priority: 'MEDIUM',
                estimated_hours: 35
              },
              '3.12': { 
                title: 'Advanced Workflow Debugging',
                status: 'DOCUMENTED',
                priority: 'LOW',
                estimated_hours: 40
              }
            };

            // Project Board Configuration
            const PROJECT_COLUMNS = {
              'BACKLOG': 'Epic 3 - Backlog',
              'READY': 'Epic 3 - Ready for Development', 
              'IN_PROGRESS': 'Epic 3 - In Progress',
              'REVIEW': 'Epic 3 - In Review',
              'TESTING': 'Epic 3 - Testing',
              'DONE': 'Epic 3 - Completed'
            };

            // Handle Issue Events
            if (context.eventName === 'issues') {
              const issue = context.payload.issue;
              const action = context.payload.action;
              
              // Check if this is an Epic 3 story
              const storyMatch = issue.title.match(/Story\s+3\.(\d+)/i) || 
                               issue.title.match(/3\.(\d+):/i);
              
              if (storyMatch) {
                const storyNum = `3.${storyMatch[1]}`;
                const storyConfig = EPIC_3_STORIES[storyNum];
                
                if (storyConfig) {
                  console.log(`Processing Epic 3 Story ${storyNum}: ${storyConfig.title}`);
                  
                  // Auto-label Epic 3 stories
                  const labels = ['epic-3', `story-${storyNum}`, `priority-${storyConfig.priority.toLowerCase()}`];
                  if (storyConfig.status === 'IMPLEMENTED') {
                    labels.push('implemented', 'needs-testing');
                  } else if (storyConfig.status === 'DOCUMENTED') {
                    labels.push('documented', 'ready-for-development');
                  }
                  
                  await github.rest.issues.setLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: labels
                  });
                  
                  // Auto-assign to Epic 3 milestone
                  try {
                    const milestones = await github.rest.issues.listMilestones({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      state: 'open'
                    });
                    
                    const epic3Milestone = milestones.data.find(m => 
                      m.title.includes('Epic 3') || m.title.includes('Workflow Automation')
                    );
                    
                    if (epic3Milestone) {
                      await github.rest.issues.update({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: issue.number,
                        milestone: epic3Milestone.number
                      });
                    }
                  } catch (error) {
                    console.log('Could not assign milestone:', error.message);
                  }
                  
                  // Add implementation status comment for recovered stories
                  if (storyConfig.status === 'IMPLEMENTED' && action === 'opened') {
                    const components = storyConfig.components?.join(', ') || 'Multiple components';
                    const comment = `🎉 **RECOVERY STATUS: IMPLEMENTED**

This story was successfully recovered from lost documentation! 

**Implementation Status:**
✅ **Components**: ${components}
✅ **Estimated Hours**: ${storyConfig.estimated_hours}h of work already completed
✅ **Status**: Ready for integration testing and deployment

**Next Steps:**
1. [ ] Integration testing verification
2. [ ] End-to-end testing  
3. [ ] Performance validation
4. [ ] Production deployment

*This story represents significant completed work that was recovered during Epic 3 restoration.*`;

                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: comment
                    });
                  }
                }
              }
            }

            // Handle Pull Request Events  
            if (context.eventName === 'pull_request') {
              const pr = context.payload.pull_request;
              const action = context.payload.action;
              
              // Check if PR references Epic 3 stories
              const storyRefs = pr.title.match(/(?:Story\s+3\.(\d+)|3\.(\d+):|\#3\.(\d+))/gi) || [];
              const bodyRefs = pr.body?.match(/(?:Story\s+3\.(\d+)|3\.(\d+):|\#3\.(\d+))/gi) || [];
              const allRefs = [...storyRefs, ...bodyRefs];
              
              if (allRefs.length > 0) {
                console.log(`PR references Epic 3 stories: ${allRefs.join(', ')}`);
                
                // Auto-label Epic 3 PRs
                const prLabels = ['epic-3'];
                allRefs.forEach(ref => {
                  const match = ref.match(/3\.(\d+)/);
                  if (match) {
                    prLabels.push(`story-3.${match[1]}`);
                  }
                });
                
                if (action === 'ready_for_review') {
                  prLabels.push('ready-for-review');
                } else if (action === 'converted_to_draft') {
                  prLabels.push('work-in-progress');
                }
                
                await github.rest.issues.setLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: prLabels
                });
                
                // Auto-comment on Epic 3 PRs
                if (action === 'opened') {
                  const comment = `🚀 **Epic 3 - Workflow Automation Excellence**

This PR contributes to Epic 3 stories: ${allRefs.join(', ')}

**Automated Checks:**
- [ ] Story acceptance criteria validation
- [ ] Integration with existing workflow automation
- [ ] Performance impact assessment
- [ ] Epic 3 milestone progress update

**Epic 3 Goals:**
- Visual workflow debugging capabilities
- Smart AI-powered template recommendations  
- Performance analytics and SLA monitoring
- Advanced workflow optimization features

*Epic 3 automation will track progress and update project boards accordingly.*`;

                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: comment
                  });
                }
              }
            }

      - name: Update Epic 3 Project Board
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github } = require('@actions/github');
            
            // Epic 3 Project Board Configuration
            const PROJECT_ID = "PVT_kwHOAMC-2s4BAKaH";
            const PROJECT_NUMBER = 13;
            
            // Story status to BMad Phase mapping
            const STATUS_TO_BMAD_PHASE = {
              'IMPLEMENTED': '🚀 Deployed',
              'DOCUMENTED': '📋 Ready',
              'IN_DEVELOPMENT': '🔧 In Development',
              'TESTING': '🧪 Testing',
              'COMPLETED': '✅ Done'
            };
            
            // Story status to board status mapping  
            const STATUS_TO_BOARD_STATUS = {
              'IMPLEMENTED': 'Done',
              'DOCUMENTED': 'Todo', 
              'IN_DEVELOPMENT': 'In Progress',
              'TESTING': 'In Progress',
              'COMPLETED': 'Done'
            };
            
            // Story configurations from above
            const EPIC_3_STORIES = {
              '3.1': { status: 'IMPLEMENTED', title: 'Visual Workflow Debugging' },
              '3.2': { status: 'IMPLEMENTED', title: 'Smart Workflow Templates' },
              '3.3': { status: 'IMPLEMENTED', title: 'Performance Analytics Dashboard' },
              '3.4': { status: 'DOCUMENTED', title: 'Predictive SLA Prevention' },
              '3.5': { status: 'DOCUMENTED', title: 'SLA Threshold Optimization' },
              '3.6': { status: 'DOCUMENTED', title: 'SLA Violation Workflows' },
              '3.7': { status: 'DOCUMENTED', title: 'Context-Aware Templates' },
              '3.8': { status: 'DOCUMENTED', title: 'Component Suggestions' },
              '3.9': { status: 'DOCUMENTED', title: 'Template Optimization' },
              '3.10': { status: 'DOCUMENTED', title: 'Multi-Platform Orchestration' },
              '3.11': { status: 'DOCUMENTED', title: 'Intelligent Workflow Optimization' },
              '3.12': { status: 'DOCUMENTED', title: 'Advanced Workflow Debugging' }
            };
            
            console.log('🎯 Updating Epic 3 Project Board...');
            
            try {
              // Get project items
              const projectItems = await github.graphql(`
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      id
                      items(first: 20) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              number
                              title
                            }
                          }
                          fieldValues(first: 10) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    name
                                  }
                                }
                              }
                              ... on ProjectV2ItemFieldTextValue {
                                text
                                field {
                                  ... on ProjectV2Field {
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                owner: 'gpb360',
                number: PROJECT_NUMBER
              });
              
              const project = projectItems.user.projectV2;
              const items = project.items.nodes;
              const fields = project.fields.nodes;
              
              // Find BMad Phase and Status fields
              const bmadPhaseField = fields.find(f => f.name === 'BMad Phase');
              const statusField = fields.find(f => f.name === 'Status');
              
              if (!bmadPhaseField) {
                console.log('❌ BMad Phase field not found');
                return;
              }
              
              console.log(`📋 Found ${items.length} project items`);
              console.log(`🏷️ BMad Phase field ID: ${bmadPhaseField.id}`);
              
              // Update each Epic 3 story
              for (const [storyNum, storyConfig] of Object.entries(EPIC_3_STORIES)) {
                const item = items.find(item => 
                  item.content?.title?.includes(`3.${storyNum.split('.')[1]}`) ||
                  item.content?.title?.includes(storyConfig.title)
                );
                
                if (item) {
                  console.log(`🔄 Updating Story ${storyNum}: ${storyConfig.title}`);
                  
                  const targetBmadPhase = STATUS_TO_BMAD_PHASE[storyConfig.status];
                  const bmadOption = bmadPhaseField.options.find(opt => opt.name === targetBmadPhase);
                  
                  if (bmadOption) {
                    try {
                      await github.graphql(`
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                          updateProjectV2ItemFieldValue(input: {
                            projectId: $projectId
                            itemId: $itemId
                            fieldId: $fieldId
                            value: { singleSelectOptionId: $optionId }
                          }) {
                            projectV2Item {
                              id
                            }
                          }
                        }
                      `, {
                        projectId: PROJECT_ID,
                        itemId: item.id,
                        fieldId: bmadPhaseField.id,
                        optionId: bmadOption.id
                      });
                      
                      console.log(`✅ Updated ${storyNum} BMad Phase to: ${targetBmadPhase}`);
                    } catch (error) {
                      console.log(`❌ Failed to update ${storyNum}: ${error.message}`);
                    }
                  } else {
                    console.log(`❌ BMad Phase option not found: ${targetBmadPhase}`);
                  }
                } else {
                  console.log(`❌ Item not found for Story ${storyNum}`);
                }
              }
              
              console.log('🎉 Project board update complete!');
              
            } catch (error) {
              console.error('❌ Project board update failed:', error);
            }

      - name: Update Epic 3 Progress Metrics
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github } = require('@actions/github');
            
            // Calculate Epic 3 completion metrics
            const stories = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} label:epic-3 is:issue`
            });
            
            const total = stories.data.total_count;
            const implemented = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} label:epic-3 label:implemented is:issue`
            });
            const documented = await github.rest.search.issuesAndPullRequests({  
              q: `repo:${context.repo.owner}/${context.repo.repo} label:epic-3 label:documented is:issue`
            });
            const completed = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} label:epic-3 is:closed is:issue`
            });
            
            const implementedCount = implemented.data.total_count;
            const documentedCount = documented.data.total_count;  
            const completedCount = completed.data.total_count;
            const progressPercent = Math.round((completedCount / Math.max(total, 12)) * 100);
            
            console.log(`Epic 3 Progress: ${completedCount}/${total} stories complete (${progressPercent}%)`);
            console.log(`Implementation Status: ${implementedCount} implemented, ${documentedCount} documented`);
            
            // Update repository status with Epic 3 progress
            const statusComment = `📊 **Epic 3 - Workflow Automation Excellence Progress**

**Overall Progress: ${progressPercent}% Complete** 
- ✅ **Implemented**: ${implementedCount} stories (recovered)
- 📋 **Documented**: ${documentedCount} stories (ready for development)  
- 🎯 **Completed**: ${completedCount} stories 
- 📈 **Total Stories**: ${Math.max(total, 12)} in Epic 3

**Recently Recovered:**
- Story 3.1: Visual Workflow Debugging (✅ IMPLEMENTED)
- Story 3.2: Smart Workflow Templates (✅ IMPLEMENTED)

*Last updated: ${new Date().toISOString()}*`;

            // Store progress in repository description or README
            console.log('Epic 3 automation complete - progress tracked');

      - name: Epic 3 Development Recommendations  
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github } = require('@actions/github');
            
            // Generate development recommendations based on Epic 3 status
            const recommendations = [
              "🎯 **PRIORITY**: Stories 3.1 & 3.2 are implemented - focus on integration testing",
              "🚀 **NEXT**: Story 3.3 (Performance Analytics) is documented and ready for development", 
              "🔧 **OPTIMIZATION**: Story 3.7 (Context-Aware Templates) builds on existing 3.2 implementation",
              "📊 **ANALYTICS**: Stories 3.4-3.6 focus on SLA monitoring - consider as a group",
              "🎨 **UI/UX**: Stories 3.8-3.9 enhance template system - good for frontend developers"
            ];
            
            console.log('Epic 3 Development Recommendations:');
            recommendations.forEach((rec, i) => console.log(`${i + 1}. ${rec}`));