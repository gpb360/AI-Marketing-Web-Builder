name: Minimal Health Check

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  push:
    branches: [main]

jobs:
  health-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Basic Repository Health Check
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { context, github } = require('@actions/github');
          
          console.log('🏥 Running Basic Health Check...');
          
          // Check recent workflow runs
          const { data: runs } = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 10
          });
          
          const recentRuns = runs.workflow_runs.slice(0, 5);
          const failedRuns = recentRuns.filter(run => run.conclusion === 'failure');
          
          console.log(`Recent runs: ${recentRuns.length}`);
          console.log(`Failed runs: ${failedRuns.length}`);
          
          // Check open PRs
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open'
          });
          
          console.log(`Open PRs: ${prs.length}`);
          
          // Check recent issues
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'epic-3,bug,urgent'
          });
          
          console.log(`Critical issues: ${issues.length}`);
          
          // Generate summary
          const healthStatus = {
            timestamp: new Date().toISOString(),
            repository_health: 'good',
            workflow_failures: failedRuns.length,
            open_prs: prs.length,
            critical_issues: issues.length,
            epic_3_status: 'active'
          };
          
          console.log('Health Check Summary:', JSON.stringify(healthStatus, null, 2));
          
          // If too many failures, create alert
          if (failedRuns.length >= 3) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Multiple Workflow Failures Detected',
              body: `## Workflow Health Alert
              
**Status:** ${failedRuns.length} workflow failures detected in recent runs

**Failed Workflows:**
${failedRuns.map(run => `- ${run.name} (${run.conclusion}) - ${run.created_at}`).join('\n')}

**Action Required:** Investigate and resolve workflow issues.

**Epic 3 Status:** Development may be impacted

*Generated by Minimal Health Check*`,
              labels: ['workflow-failure', 'urgent', 'epic-3']
            });
          }
          
          return healthStatus;

    - name: Epic 3 Progress Check
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('📊 Checking Epic 3 Progress...');
          
          // Check for Epic 3 related issues and PRs
          const { data: epic3Issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'epic-3'
          });
          
          const { data: epic3PRs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: 'dev/dev-agent/story-3.3-performance-analytics'
          });
          
          console.log(`Epic 3 Issues: ${epic3Issues.length}`);
          console.log(`Epic 3 PRs: ${epic3PRs.length}`);
          
          // Simple Epic 3 status
          const epic3Status = {
            total_issues: epic3Issues.length,
            open_issues: epic3Issues.filter(i => i.state === 'open').length,
            active_prs: epic3PRs.length,
            current_story: '3.3-performance-analytics',
            health: epic3Issues.filter(i => i.labels.some(l => l.name === 'bug')).length < 3 ? 'healthy' : 'needs-attention'
          };
          
          console.log('Epic 3 Status:', JSON.stringify(epic3Status, null, 2));
          
          return epic3Status;