name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Quality Checks
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web-builder/package-lock.json
    
    - name: Install dependencies
      working-directory: ./web-builder
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./web-builder
      run: npm run lint
    
    - name: Check TypeScript
      working-directory: ./web-builder
      run: npx tsc --noEmit

  # Backend Quality Checks
  backend-checks:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      working-directory: ./web-builder/backend
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        pip install ruff pytest black isort
    
    - name: Run Ruff (linting)
      working-directory: ./web-builder/backend
      run: |
        source venv/bin/activate
        ruff check src/
    
    - name: Check code formatting
      working-directory: ./web-builder/backend
      run: |
        source venv/bin/activate
        black --check src/
        isort --check-only src/
    
    - name: Run type checking
      working-directory: ./web-builder/backend
      run: |
        source venv/bin/activate
        python -m mypy src/ --ignore-missing-imports

  # Build Tests
  build-frontend:
    name: Frontend Build Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web-builder/package-lock.json
    
    - name: Install dependencies
      working-directory: ./web-builder
      run: npm ci
    
    - name: Build application
      working-directory: ./web-builder
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: web-builder/.next/
        retention-days: 1

  # E2E Testing
  playwright-tests:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, build-frontend]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web-builder/package-lock.json
    
    - name: Install dependencies
      working-directory: ./web-builder
      run: npm ci
    
    - name: Install Playwright Browsers
      working-directory: ./web-builder
      run: npx playwright install --with-deps chromium
    
    - name: Setup Python for Backend
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Start Backend Services
      working-directory: ./web-builder/backend
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        echo "Backend started"
    
    - name: Run Playwright Tests
      working-directory: ./web-builder
      run: npm run test:ci
      env:
        CI: true
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-pr-${{ github.event.number }}
        path: web-builder/playwright-report/
        retention-days: 7

  # Critical Path Testing
  magic-moment-test:
    name: Magic Moment Critical Path
    runs-on: ubuntu-latest
    needs: [lint-and-format, backend-checks]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web-builder/package-lock.json
    
    - name: Install dependencies
      working-directory: ./web-builder
      run: npm ci
    
    - name: Install Playwright
      working-directory: ./web-builder
      run: npx playwright install chromium
    
    - name: Setup Backend
      working-directory: ./web-builder/backend
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run Magic Moment Test
      working-directory: ./web-builder
      run: npm run test:magic-moment
    
    - name: Upload Magic Moment Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: magic-moment-results-pr-${{ github.event.number }}
        path: web-builder/test-results/
        retention-days: 3

  # Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web-builder/package-lock.json
    
    - name: Install dependencies
      working-directory: ./web-builder
      run: npm ci
    
    - name: Run npm audit
      working-directory: ./web-builder
      run: npm audit --audit-level=moderate
    
    - name: Run Semgrep security scan
      uses: semgrep/semgrep-action@v1
      with:
        config: auto
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Performance Testing
  lighthouse-ci:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [build-frontend]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web-builder/package-lock.json
    
    - name: Install dependencies
      working-directory: ./web-builder
      run: npm ci
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: Build and Start Server
      working-directory: ./web-builder
      run: |
        npm run build
        npm start &
        sleep 10
    
    - name: Run Lighthouse CI
      working-directory: ./web-builder
      run: lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Final Status Check
  pr-ready:
    name: PR Ready for Review
    runs-on: ubuntu-latest
    needs: [lint-and-format, backend-checks, build-frontend, playwright-tests, magic-moment-test, security-scan]
    if: always()
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.lint-and-format.result }}" == "success" && \
              "${{ needs.backend-checks.result }}" == "success" && \
              "${{ needs.build-frontend.result }}" == "success" && \
              "${{ needs.playwright-tests.result }}" == "success" && \
              "${{ needs.magic-moment-test.result }}" == "success" && \
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ All checks passed! PR is ready for review."
        else
          echo "❌ Some checks failed. Please review and fix issues."
          exit 1
        fi
    
    - name: Comment on PR
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { needs } = context.payload.workflow_run || { needs: context.payload.workflow.conclusion };
          const allPassed = [
            '${{ needs.lint-and-format.result }}',
            '${{ needs.backend-checks.result }}', 
            '${{ needs.build-frontend.result }}',
            '${{ needs.playwright-tests.result }}',
            '${{ needs.magic-moment-test.result }}',
            '${{ needs.security-scan.result }}'
          ].every(result => result === 'success');
          
          const status = allPassed ? '✅ Ready for Review' : '❌ Requires Fixes';
          const emoji = allPassed ? '🚀' : '🔧';
          
          const body = `## ${emoji} PR Status: ${status}
          
          ### Automated Checks Results:
          - **Code Quality**: ${{ needs.lint-and-format.result == 'success' && '✅' || '❌' }} Lint & Format
          - **Backend Quality**: ${{ needs.backend-checks.result == 'success' && '✅' || '❌' }} Python Code Quality  
          - **Build**: ${{ needs.build-frontend.result == 'success' && '✅' || '❌' }} Frontend Build
          - **E2E Tests**: ${{ needs.playwright-tests.result == 'success' && '✅' || '❌' }} Playwright Tests
          - **Critical Path**: ${{ needs.magic-moment-test.result == 'success' && '✅' || '❌' }} Magic Moment Journey
          - **Security**: ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} Vulnerability Scan
          
          ${allPassed ? 
            '🎉 **All checks passed!** This PR is ready for code review and can be merged after approval.' : 
            '⚠️ **Some checks failed.** Please review the failed checks and fix issues before requesting review.'
          }
          
          [View detailed test results in the Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });